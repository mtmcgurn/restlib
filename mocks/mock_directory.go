// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/reaction-eng/restlib/file (interfaces: Directory)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	file "github.com/reaction-eng/restlib/file"
	reflect "reflect"
	time "time"
)

// MockDirectory is a mock of Directory interface
type MockDirectory struct {
	ctrl     *gomock.Controller
	recorder *MockDirectoryMockRecorder
}

// MockDirectoryMockRecorder is the mock recorder for MockDirectory
type MockDirectoryMockRecorder struct {
	mock *MockDirectory
}

// NewMockDirectory creates a new mock instance
func NewMockDirectory(ctrl *gomock.Controller) *MockDirectory {
	mock := &MockDirectory{ctrl: ctrl}
	mock.recorder = &MockDirectoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDirectory) EXPECT() *MockDirectoryMockRecorder {
	return m.recorder
}

// ForEach mocks base method
func (m *MockDirectory) ForEach(arg0 bool, arg1 file.ItemFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForEach", arg0, arg1)
}

// ForEach indicates an expected call of ForEach
func (mr *MockDirectoryMockRecorder) ForEach(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForEach", reflect.TypeOf((*MockDirectory)(nil).ForEach), arg0, arg1)
}

// GetDate mocks base method
func (m *MockDirectory) GetDate() *time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDate")
	ret0, _ := ret[0].(*time.Time)
	return ret0
}

// GetDate indicates an expected call of GetDate
func (mr *MockDirectoryMockRecorder) GetDate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDate", reflect.TypeOf((*MockDirectory)(nil).GetDate))
}

// GetId mocks base method
func (m *MockDirectory) GetId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetId indicates an expected call of GetId
func (mr *MockDirectoryMockRecorder) GetId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetId", reflect.TypeOf((*MockDirectory)(nil).GetId))
}

// GetItems mocks base method
func (m *MockDirectory) GetItems() []file.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItems")
	ret0, _ := ret[0].([]file.Item)
	return ret0
}

// GetItems indicates an expected call of GetItems
func (mr *MockDirectoryMockRecorder) GetItems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItems", reflect.TypeOf((*MockDirectory)(nil).GetItems))
}

// GetName mocks base method
func (m *MockDirectory) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockDirectoryMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockDirectory)(nil).GetName))
}

// GetParentId mocks base method
func (m *MockDirectory) GetParentId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParentId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetParentId indicates an expected call of GetParentId
func (mr *MockDirectoryMockRecorder) GetParentId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParentId", reflect.TypeOf((*MockDirectory)(nil).GetParentId))
}

// GetType mocks base method
func (m *MockDirectory) GetType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetType indicates an expected call of GetType
func (mr *MockDirectoryMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockDirectory)(nil).GetType))
}
