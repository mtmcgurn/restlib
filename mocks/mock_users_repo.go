// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/reaction-eng/restlib/users (interfaces: Repo)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	users "github.com/reaction-eng/restlib/users"
	reflect "reflect"
)

// MockUserRepo is a mock of Repo interface
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// ActivateUser mocks base method
func (m *MockUserRepo) ActivateUser(arg0 users.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateUser indicates an expected call of ActivateUser
func (mr *MockUserRepoMockRecorder) ActivateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateUser", reflect.TypeOf((*MockUserRepo)(nil).ActivateUser), arg0)
}

// AddUser mocks base method
func (m *MockUserRepo) AddUser(arg0 users.User) (users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0)
	ret0, _ := ret[0].(users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser
func (mr *MockUserRepoMockRecorder) AddUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUserRepo)(nil).AddUser), arg0)
}

// GetUser mocks base method
func (m *MockUserRepo) GetUser(arg0 int) (users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0)
	ret0, _ := ret[0].(users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockUserRepoMockRecorder) GetUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserRepo)(nil).GetUser), arg0)
}

// GetUserByEmail mocks base method
func (m *MockUserRepo) GetUserByEmail(arg0 string) (users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0)
	ret0, _ := ret[0].(users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail
func (mr *MockUserRepoMockRecorder) GetUserByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserRepo)(nil).GetUserByEmail), arg0)
}

// ListAllActiveUsers mocks base method
func (m *MockUserRepo) ListAllActiveUsers() ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllActiveUsers")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllActiveUsers indicates an expected call of ListAllActiveUsers
func (mr *MockUserRepoMockRecorder) ListAllActiveUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllActiveUsers", reflect.TypeOf((*MockUserRepo)(nil).ListAllActiveUsers))
}

// ListAllUsers mocks base method
func (m *MockUserRepo) ListAllUsers() ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllUsers")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllUsers indicates an expected call of ListAllUsers
func (mr *MockUserRepoMockRecorder) ListAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllUsers", reflect.TypeOf((*MockUserRepo)(nil).ListAllUsers))
}

// NewEmptyUser mocks base method
func (m *MockUserRepo) NewEmptyUser() users.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewEmptyUser")
	ret0, _ := ret[0].(users.User)
	return ret0
}

// NewEmptyUser indicates an expected call of NewEmptyUser
func (mr *MockUserRepoMockRecorder) NewEmptyUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewEmptyUser", reflect.TypeOf((*MockUserRepo)(nil).NewEmptyUser))
}

// UpdateUser mocks base method
func (m *MockUserRepo) UpdateUser(arg0 users.User) (users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0)
	ret0, _ := ret[0].(users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *MockUserRepoMockRecorder) UpdateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepo)(nil).UpdateUser), arg0)
}
