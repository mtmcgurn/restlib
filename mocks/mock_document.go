// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/reaction-eng/restlib/file (interfaces: Document)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockDocument is a mock of Document interface
type MockDocument struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentMockRecorder
}

// MockDocumentMockRecorder is the mock recorder for MockDocument
type MockDocumentMockRecorder struct {
	mock *MockDocument
}

// NewMockDocument creates a new mock instance
func NewMockDocument(ctrl *gomock.Controller) *MockDocument {
	mock := &MockDocument{ctrl: ctrl}
	mock.recorder = &MockDocumentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDocument) EXPECT() *MockDocumentMockRecorder {
	return m.recorder
}

// GetDate mocks base method
func (m *MockDocument) GetDate() *time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDate")
	ret0, _ := ret[0].(*time.Time)
	return ret0
}

// GetDate indicates an expected call of GetDate
func (mr *MockDocumentMockRecorder) GetDate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDate", reflect.TypeOf((*MockDocument)(nil).GetDate))
}

// GetId mocks base method
func (m *MockDocument) GetId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetId indicates an expected call of GetId
func (mr *MockDocumentMockRecorder) GetId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetId", reflect.TypeOf((*MockDocument)(nil).GetId))
}

// GetName mocks base method
func (m *MockDocument) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockDocumentMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockDocument)(nil).GetName))
}

// ParentId mocks base method
func (m *MockDocument) ParentId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParentId")
	ret0, _ := ret[0].(string)
	return ret0
}

// ParentId indicates an expected call of ParentId
func (mr *MockDocumentMockRecorder) ParentId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParentId", reflect.TypeOf((*MockDocument)(nil).ParentId))
}

// Preview mocks base method
func (m *MockDocument) Preview() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Preview")
	ret0, _ := ret[0].(string)
	return ret0
}

// Preview indicates an expected call of Preview
func (mr *MockDocumentMockRecorder) Preview() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preview", reflect.TypeOf((*MockDocument)(nil).Preview))
}

// ThumbnailUrl mocks base method
func (m *MockDocument) ThumbnailUrl() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ThumbnailUrl")
	ret0, _ := ret[0].(string)
	return ret0
}

// ThumbnailUrl indicates an expected call of ThumbnailUrl
func (mr *MockDocumentMockRecorder) ThumbnailUrl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThumbnailUrl", reflect.TypeOf((*MockDocument)(nil).ThumbnailUrl))
}

// Type mocks base method
func (m *MockDocument) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockDocumentMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockDocument)(nil).Type))
}
