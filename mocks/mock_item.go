// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/reaction-eng/restlib/file (interfaces: Storage)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	file "github.com/reaction-eng/restlib/file"
	io "io"
	reflect "reflect"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// BuildFileHierarchy mocks base method
func (m *MockStorage) BuildFileHierarchy(arg0 string, arg1 bool, arg2 func(string) bool) file.Directory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildFileHierarchy", arg0, arg1, arg2)
	ret0, _ := ret[0].(file.Directory)
	return ret0
}

// BuildFileHierarchy indicates an expected call of BuildFileHierarchy
func (mr *MockStorageMockRecorder) BuildFileHierarchy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildFileHierarchy", reflect.TypeOf((*MockStorage)(nil).BuildFileHierarchy), arg0, arg1, arg2)
}

// BuildFormHierarchy mocks base method
func (m *MockStorage) BuildFormHierarchy(arg0 string) file.Directory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildFormHierarchy", arg0)
	ret0, _ := ret[0].(file.Directory)
	return ret0
}

// BuildFormHierarchy indicates an expected call of BuildFormHierarchy
func (mr *MockStorageMockRecorder) BuildFormHierarchy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildFormHierarchy", reflect.TypeOf((*MockStorage)(nil).BuildFormHierarchy), arg0)
}

// GetArbitraryFile mocks base method
func (m *MockStorage) GetArbitraryFile(arg0 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArbitraryFile", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArbitraryFile indicates an expected call of GetArbitraryFile
func (mr *MockStorageMockRecorder) GetArbitraryFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArbitraryFile", reflect.TypeOf((*MockStorage)(nil).GetArbitraryFile), arg0)
}

// GetFileAsInterface mocks base method
func (m *MockStorage) GetFileAsInterface(arg0 string, arg1 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetFileAsInterface", arg0, arg1)
}

// GetFileAsInterface indicates an expected call of GetFileAsInterface
func (mr *MockStorageMockRecorder) GetFileAsInterface(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileAsInterface", reflect.TypeOf((*MockStorage)(nil).GetFileAsInterface), arg0, arg1)
}

// GetFileHtml mocks base method
func (m *MockStorage) GetFileHtml(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileHtml", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFileHtml indicates an expected call of GetFileHtml
func (mr *MockStorageMockRecorder) GetFileHtml(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileHtml", reflect.TypeOf((*MockStorage)(nil).GetFileHtml), arg0)
}

// GetFilePreview mocks base method
func (m *MockStorage) GetFilePreview(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilePreview", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFilePreview indicates an expected call of GetFilePreview
func (mr *MockStorageMockRecorder) GetFilePreview(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilePreview", reflect.TypeOf((*MockStorage)(nil).GetFilePreview), arg0)
}

// GetFileThumbnailUrl mocks base method
func (m *MockStorage) GetFileThumbnailUrl(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetFileThumbnailUrl", arg0)
}

// GetFileThumbnailUrl indicates an expected call of GetFileThumbnailUrl
func (mr *MockStorageMockRecorder) GetFileThumbnailUrl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileThumbnailUrl", reflect.TypeOf((*MockStorage)(nil).GetFileThumbnailUrl), arg0)
}

// GetFirstFileMatching mocks base method
func (m *MockStorage) GetFirstFileMatching(arg0, arg1 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstFileMatching", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirstFileMatching indicates an expected call of GetFirstFileMatching
func (mr *MockStorageMockRecorder) GetFirstFileMatching(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstFileMatching", reflect.TypeOf((*MockStorage)(nil).GetFirstFileMatching), arg0, arg1)
}

// GetMostRecentFileInDir mocks base method
func (m *MockStorage) GetMostRecentFileInDir(arg0 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMostRecentFileInDir", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostRecentFileInDir indicates an expected call of GetMostRecentFileInDir
func (mr *MockStorageMockRecorder) GetMostRecentFileInDir(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostRecentFileInDir", reflect.TypeOf((*MockStorage)(nil).GetMostRecentFileInDir), arg0)
}

// PostArbitraryFile mocks base method
func (m *MockStorage) PostArbitraryFile(arg0, arg1 string, arg2 io.Reader, arg3 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostArbitraryFile", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostArbitraryFile indicates an expected call of PostArbitraryFile
func (mr *MockStorageMockRecorder) PostArbitraryFile(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostArbitraryFile", reflect.TypeOf((*MockStorage)(nil).PostArbitraryFile), arg0, arg1, arg2, arg3)
}
